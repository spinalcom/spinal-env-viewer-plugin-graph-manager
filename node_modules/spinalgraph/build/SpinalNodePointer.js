"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spinalCoreConnectorjs = _interopRequireDefault(require("spinal-core-connectorjs"));

var _SpinalNode = _interopRequireDefault(require("./Nodes/SpinalNode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const globalType = typeof window === "undefined" ? global : window;
/**
 * Wrapper over SpinalNodePointer containing some information about the pointed element
 */

class SpinalNodePointer extends globalType.Model {
  constructor(element) {
    super();
    this.setUp(element);
  }

  setUp(element) {
    this.add_attr({
      ptr: new globalType.Ptr(),
      info: {
        pointed_id: "undefined",
        pointed_type: "undefined"
      }
    });

    if (typeof element !== "undefined") {
      this.setElement(element);
    }
  }
  /**
   * Set pointer to point to this element
   * @param element {*}
   */


  setElement(element) {
    if (element instanceof _SpinalNode.default) {
      this.info.pointed_id.set(element.getId());
      this.info.pointed_type.set(element.getType());
    }

    this.ptr.set(element);
  }
  /**
   * This function returns the id of the pointed element
   * @return {Str}
   */


  getId() {
    return this.info.pointed_id;
  }

}

_spinalCoreConnectorjs.default.register_models([SpinalNodePointer]);

var _default = SpinalNodePointer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TcGluYWxOb2RlUG9pbnRlci5qcyJdLCJuYW1lcyI6WyJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiU3BpbmFsTm9kZVBvaW50ZXIiLCJNb2RlbCIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsInNldFVwIiwiYWRkX2F0dHIiLCJwdHIiLCJQdHIiLCJpbmZvIiwicG9pbnRlZF9pZCIsInBvaW50ZWRfdHlwZSIsInNldEVsZW1lbnQiLCJTcGluYWxOb2RlIiwic2V0IiwiZ2V0SWQiLCJnZXRUeXBlIiwic3BpbmFsQ29yZSIsInJlZ2lzdGVyX21vZGVscyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsVUFBVSxHQUFHLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQUVBOzs7O0FBR0EsTUFBTUUsaUJBQU4sU0FBZ0NILFVBQVUsQ0FBQ0ksS0FBM0MsQ0FBaUQ7QUFDN0NDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ2pCO0FBQ0EsU0FBS0MsS0FBTCxDQUFXRCxPQUFYO0FBQ0g7O0FBRURDLEVBQUFBLEtBQUssQ0FBQ0QsT0FBRCxFQUFVO0FBQ1gsU0FBS0UsUUFBTCxDQUFjO0FBQ1ZDLE1BQUFBLEdBQUcsRUFBRSxJQUFJVCxVQUFVLENBQUNVLEdBQWYsRUFESztBQUVWQyxNQUFBQSxJQUFJLEVBQUU7QUFDRkMsUUFBQUEsVUFBVSxFQUFFLFdBRFY7QUFFRkMsUUFBQUEsWUFBWSxFQUFFO0FBRlo7QUFGSSxLQUFkOztBQVFBLFFBQUssT0FBT1AsT0FBUCxLQUFtQixXQUF4QixFQUFzQztBQUNsQyxXQUFLUSxVQUFMLENBQWdCUixPQUFoQjtBQUNIO0FBRUo7QUFFRDs7Ozs7O0FBSUFRLEVBQUFBLFVBQVUsQ0FBQ1IsT0FBRCxFQUFVO0FBQ2hCLFFBQUlBLE9BQU8sWUFBWVMsbUJBQXZCLEVBQW1DO0FBQy9CLFdBQUtKLElBQUwsQ0FBVUMsVUFBVixDQUFxQkksR0FBckIsQ0FBeUJWLE9BQU8sQ0FBQ1csS0FBUixFQUF6QjtBQUNBLFdBQUtOLElBQUwsQ0FBVUUsWUFBVixDQUF1QkcsR0FBdkIsQ0FBMkJWLE9BQU8sQ0FBQ1ksT0FBUixFQUEzQjtBQUNIOztBQUNELFNBQUtULEdBQUwsQ0FBU08sR0FBVCxDQUFhVixPQUFiO0FBQ0g7QUFFRDs7Ozs7O0FBSUFXLEVBQUFBLEtBQUssR0FBRztBQUNKLFdBQU8sS0FBS04sSUFBTCxDQUFVQyxVQUFqQjtBQUNIOztBQXZDNEM7O0FBNENqRE8sK0JBQVdDLGVBQVgsQ0FBMkIsQ0FBQ2pCLGlCQUFELENBQTNCOztlQUNlQSxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzcGluYWxDb3JlIGZyb20gXCJzcGluYWwtY29yZS1jb25uZWN0b3Jqc1wiXG5pbXBvcnQgU3BpbmFsTm9kZSBmcm9tIFwiLi9Ob2Rlcy9TcGluYWxOb2RlXCI7XG5cbmNvbnN0IGdsb2JhbFR5cGUgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogd2luZG93O1xuXG4vKipcbiAqIFdyYXBwZXIgb3ZlciBTcGluYWxOb2RlUG9pbnRlciBjb250YWluaW5nIHNvbWUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBvaW50ZWQgZWxlbWVudFxuICovXG5jbGFzcyBTcGluYWxOb2RlUG9pbnRlciBleHRlbmRzIGdsb2JhbFR5cGUuTW9kZWwge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXRVcChlbGVtZW50KTtcbiAgICB9XG5cbiAgICBzZXRVcChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICAgICAgcHRyOiBuZXcgZ2xvYmFsVHlwZS5QdHIoKSxcbiAgICAgICAgICAgIGluZm86IHtcbiAgICAgICAgICAgICAgICBwb2ludGVkX2lkOiBcInVuZGVmaW5lZFwiLFxuICAgICAgICAgICAgICAgIHBvaW50ZWRfdHlwZTogXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoKHR5cGVvZiBlbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgcG9pbnRlciB0byBwb2ludCB0byB0aGlzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZWxlbWVudCB7Kn1cbiAgICAgKi9cbiAgICBzZXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTcGluYWxOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmluZm8ucG9pbnRlZF9pZC5zZXQoZWxlbWVudC5nZXRJZCgpKTtcbiAgICAgICAgICAgIHRoaXMuaW5mby5wb2ludGVkX3R5cGUuc2V0KGVsZW1lbnQuZ2V0VHlwZSgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnB0ci5zZXQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBpZCBvZiB0aGUgcG9pbnRlZCBlbGVtZW50XG4gICAgICogQHJldHVybiB7U3RyfVxuICAgICAqL1xuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmZvLnBvaW50ZWRfaWQ7XG4gICAgfVxuXG5cbn1cblxuc3BpbmFsQ29yZS5yZWdpc3Rlcl9tb2RlbHMoW1NwaW5hbE5vZGVQb2ludGVyXSk7XG5leHBvcnQgZGVmYXVsdCBTcGluYWxOb2RlUG9pbnRlclxuIl19