"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exportGraph = exportGraph;
exports.importGraph = exports.initDummyJsonGraph = void 0;

require("spinal-core-connectorjs");

var _SpinalRelationFactory = require("../Relations/SpinalRelationFactory");

var _SpinalNode = _interopRequireDefault(require("../Nodes/SpinalNode"));

var _SpinalGraph = _interopRequireDefault(require("../Nodes/SpinalGraph"));

var _SpinalContext = _interopRequireDefault(require("../Nodes/SpinalContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const JSON_RELATIONS_NAME = "relation";
const JSON_NODES_INFO_NAME = "nodes_info";
const JSON_STARTING_NODE_NAME = "starting_node";

function exportGraph(_x, _x2) {
  return _exportGraph.apply(this, arguments);
}

function _exportGraph() {
  _exportGraph = _asyncToGenerator(function* (startingNode, json) {
    const startingNodeId = startingNode.getId();

    const relationMapsToJson = (relationType, relationMap, json) => {
      relationMap.forEach(relation => {
        const childrenIds = relation.getChildrenIds();

        for (let i = 0; i < childrenIds.length; i++) {
          json[relationType].push({
            from: startingNodeId,
            relationName: relation.name,
            to: childrenIds[i]
          });
        }
      });
    };

    const initJSON = () => {
      if (!json.hasOwnProperty(JSON_NODES_INFO_NAME) && !json.hasOwnProperty(JSON_RELATIONS_NAME)) {
        json[JSON_NODES_INFO_NAME] = [];
        json[JSON_RELATIONS_NAME] = {
          SPINAL_RELATION_TYPE: [],
          SPINAL_RELATION_LST_PTR_TYPE: [],
          SPINAL_RELATION_PTR_LST_TYPE: []
        };
        json[JSON_STARTING_NODE_NAME] = startingNode.info.id;
      }
    };

    initJSON();

    if (!json[JSON_NODES_INFO_NAME].includes(startingNode.info)) {
      json[JSON_NODES_INFO_NAME].push(startingNode.info);
      const relationJson = {};
      relationMapsToJson(_SpinalRelationFactory.SPINAL_RELATION_TYPE, startingNode.relationListTypeSpinalRelation, relationJson);
      relationMapsToJson(_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE, startingNode.relationListTypeSpinalRelationLstPtr, relationJson);
      relationMapsToJson(_SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE, startingNode.relationListTypeSpinalRelationPtrLst, relationJson);
      json[JSON_RELATIONS_NAME][startingNodeId] = relationJson;
      const children = yield startingNode.getChildren([]);

      for (let i = 0; i < children.length; i++) {
        yield exportGraph(children[i], json);
      }

      return json;
    } else {
      return "undefined";
    }
  });
  return _exportGraph.apply(this, arguments);
}

;

const importGraph = json => {
  const nodes = new Map();

  if (!json.hasOwnProperty(JSON_NODES_INFO_NAME) || !json.hasOwnProperty(JSON_RELATIONS_NAME) || !json.hasOwnProperty(JSON_STARTING_NODE_NAME)) {
    throw new Error("Cannot import Graph Json Malformed");
  }

  const createNodeFromInfo = info => {
    let node;

    switch (info.type) {
      case "SpinalGraph":
        node = new _SpinalGraph.default();
        break;

      case "SpinalContext":
        node = new _SpinalContext.default();
        break;

      default:
        node = new _SpinalNode.default();
        break;
    }

    node.info = info;
    return node;
  };

  const addChildrenToNode = json => {
    if (json[JSON_RELATIONS_NAME].hasOwnProperty(_SpinalRelationFactory.SPINAL_RELATION_TYPE)) json[JSON_RELATIONS_NAME][_SpinalRelationFactory.SPINAL_RELATION_TYPE].forEach(relation => {
      let node;

      if (nodes.has(relation.from) && nodes.has(relation.to)) {
        node = nodes.get(relation.from);
        node.addChild(nodes.get(relation.to), relation.relationName, _SpinalRelationFactory.SPINAL_RELATION_TYPE);
      }
    });
    if (json[JSON_RELATIONS_NAME].hasOwnProperty(_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE)) json[JSON_RELATIONS_NAME][_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE].forEach(relation => {
      let node;

      if (nodes.has(relation.from) && nodes.has(relation.to)) {
        node = nodes.get(relation.from);
        node.addChild(nodes.get(relation.to), relation.relationName, _SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE);
      }
    });
    if (json[JSON_RELATIONS_NAME].hasOwnProperty(_SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE)) json[JSON_RELATIONS_NAME][_SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE].forEach(relation => {
      let node;

      if (nodes.has(relation.from) && nodes.has(relation.to)) {
        node = nodes.get(relation.from);
        node.addChild(nodes.get(relation.to), relation.relationName, _SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE);
      }
    });
  }; //Create a node for each info contain in json[JSON_NODES_INFO_NAME]


  json[JSON_NODES_INFO_NAME].forEach(info => {
    const node = createNodeFromInfo(info);
    nodes.set(node.info.id.toString(), node);
  });
  addChildrenToNode(json);
  return nodes;
};

exports.importGraph = importGraph;

const initDummyJsonGraph = () => {
  const jsonGraph = {};
  const relation = {};
  const floorsChildren = {
    7: {
      rooms: [11, 12],
      equipment: [5, 6]
    },
    8: {
      rooms: [13, 14],
      equipment: [9, 10]
    }
  };
  const roomChildren = {
    11: {
      ref: 15,
      equipment: [16]
    },
    12: {
      equipment: [17]
    },
    13: {
      equipment: [18]
    },
    14: {
      equipment: [19]
    }
  };

  const initJSON = () => {
    jsonGraph[JSON_NODES_INFO_NAME] = [];
    jsonGraph[JSON_RELATIONS_NAME] = {};
    jsonGraph[JSON_STARTING_NODE_NAME] = "";
  };

  const initRelation = () => {
    relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE] = [];
    relation[_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE] = [];
    relation[_SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE] = [];
  };

  const initGraphRelation = () => {
    relation[_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE].push({
      from: 1,
      relationName: "hasContext",
      to: 2
    });
  };

  const initContextRelation = () => {
    relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE].push({
      fom: 2,
      relationName: "hasBuilding",
      to: 3
    });
  };

  const initBuildingRelation = () => {
    relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE].push({
      from: 3,
      relationName: "buildingHasFloor",
      to: 7
    });

    relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE].push({
      from: 3,
      relationName: "buildingHasFloor",
      to: 7
    });

    relation[_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE].push({
      from: 3,
      relationName: "buildingHasEquipment",
      to: 4
    });
  };

  const initFloorRelation = id => {
    const floorInfo = floorsChildren[id];

    for (let i = 0; i < floorInfo["rooms".length]; i++) relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE].push({
      from: id,
      relationName: "floorHasRoom",
      to: floorInfo["rooms"][i]
    });

    for (let i = 0; i < floorInfo["equipment"].length; i++) {
      relation[_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE].push({
        from: id,
        relationName: "FloorHasEquipment",
        to: floorInfo["equipment"][i]
      });
    }
  };

  const initRoomRelation = id => {
    const roomInfo = roomChildren[id];

    if (roomInfo.hasOwnProperty("ref")) {
      relation[_SpinalRelationFactory.SPINAL_RELATION_TYPE].push({
        from: id,
        relationName: "HasReference",
        to: roomInfo["ref"]
      });
    }

    roomInfo["equipment"].forEach(equipmentId => {
      relation[_SpinalRelationFactory.SPINAL_RELATION_LST_PTR_TYPE].push({
        from: id,
        relationName: "RoomHasEquipment",
        to: equipmentId
      });
    });
  };

  const createNodes = () => {
    jsonGraph[JSON_STARTING_NODE_NAME] = 1;
    jsonGraph[JSON_NODES_INFO_NAME].push({
      type: "SpinalGraph",
      id: 1
    });
    jsonGraph[JSON_NODES_INFO_NAME].push({
      type: "SpinalContext",
      id: 2
    });

    for (let i = 3; i < 20; i++) {
      jsonGraph[JSON_NODES_INFO_NAME].push({
        type: "SpinalNode",
        id: i
      });
    }
  };

  const createRelation = () => {
    initRelation();
    initGraphRelation();
    initContextRelation();
    initBuildingRelation();

    for (let id in floorsChildren) {
      if (floorsChildren.hasOwnProperty(id)) {
        initFloorRelation(id);
      }
    }

    for (let id in roomChildren) {
      if (roomChildren.hasOwnProperty(id)) {
        initRoomRelation(id);
      }
    }
  };

  initJSON();
  createNodes();
  createRelation();
  jsonGraph[JSON_RELATIONS_NAME] = relation;
  return jsonGraph;
};

exports.initDummyJsonGraph = initDummyJsonGraph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,