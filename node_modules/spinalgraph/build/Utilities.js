"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseLoad = promiseLoad;
exports.guid = guid;

require("spinal-core-connectorjs");

const globalType = typeof window === "undefined" ? global : window;
/**
 * Load the element pointed by the pointer
 * @param SpinalNodePointer
 * @returns {Promise<any>}
 */

function promiseLoad(SpinalNodePointer) {
  if (SpinalNodePointer.ptr instanceof globalType.Ptr && SpinalNodePointer.ptr.data.value !== 0 && typeof FileSystem._objects[SpinalNodePointer.ptr.data.value] !== "undefined") return Promise.resolve(FileSystem._objects[SpinalNodePointer.ptr.data.value]);else return new Promise(resolve => {
    SpinalNodePointer.ptr.load(resolve);
  });
}
/**
 * Generate a random number
 * @returns {string}
 */


function s4() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}
/**
 * Create a unique id based on the name
 * @param name
 * @returns {string}
 */


function guid(name) {
  return name + "-" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4() + "-" + Date.now().toString(16);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9VdGlsaXRpZXMuanMiXSwibmFtZXMiOlsiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsInByb21pc2VMb2FkIiwiU3BpbmFsTm9kZVBvaW50ZXIiLCJwdHIiLCJQdHIiLCJkYXRhIiwidmFsdWUiLCJGaWxlU3lzdGVtIiwiX29iamVjdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWQiLCJzNCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZ3VpZCIsIm5hbWUiLCJEYXRlIiwibm93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7QUFFQTs7Ozs7O0FBS0EsU0FBU0UsV0FBVCxDQUFxQkMsaUJBQXJCLEVBQXdDO0FBQ3BDLE1BQ0lBLGlCQUFpQixDQUFDQyxHQUFsQixZQUFpQ0wsVUFBVSxDQUFDTSxHQUE1QyxJQUNBRixpQkFBaUIsQ0FBQ0MsR0FBbEIsQ0FBc0JFLElBQXRCLENBQTJCQyxLQUEzQixLQUFxQyxDQURyQyxJQUVBLE9BQU9DLFVBQVUsQ0FBQ0MsUUFBWCxDQUFvQk4saUJBQWlCLENBQUNDLEdBQWxCLENBQXNCRSxJQUF0QixDQUEyQkMsS0FBL0MsQ0FBUCxLQUFpRSxXQUhyRSxFQUtJLE9BQU9HLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkgsVUFBVSxDQUFDQyxRQUFYLENBQW9CTixpQkFBaUIsQ0FBQ0MsR0FBbEIsQ0FBc0JFLElBQXRCLENBQTJCQyxLQUEvQyxDQUFoQixDQUFQLENBTEosS0FPSSxPQUFPLElBQUlHLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQzFCUixJQUFBQSxpQkFBaUIsQ0FBQ0MsR0FBbEIsQ0FBc0JRLElBQXRCLENBQTJCRCxPQUEzQjtBQUNILEdBRk0sQ0FBUDtBQUdQO0FBR0Q7Ozs7OztBQUlBLFNBQVNFLEVBQVQsR0FBYztBQUNWLFNBQU9DLElBQUksQ0FBQ0MsS0FBTCxDQUFXLENBQUMsSUFBSUQsSUFBSSxDQUFDRSxNQUFMLEVBQUwsSUFBc0IsT0FBakMsRUFDRkMsUUFERSxDQUNPLEVBRFAsRUFFRkMsU0FGRSxDQUVRLENBRlIsQ0FBUDtBQUdIO0FBRUQ7Ozs7Ozs7QUFLQSxTQUFTQyxJQUFULENBQWNDLElBQWQsRUFBb0I7QUFDaEIsU0FDSUEsSUFBSSxHQUFHLEdBQVAsR0FBYVAsRUFBRSxFQUFmLEdBQW9CQSxFQUFFLEVBQXRCLEdBQTJCLEdBQTNCLEdBQWlDQSxFQUFFLEVBQW5DLEdBQXdDLEdBQXhDLEdBQThDQSxFQUFFLEVBQWhELEdBQXFELEdBQXJELEdBQ0FBLEVBQUUsRUFERixHQUNPLEdBRFAsR0FDYUEsRUFBRSxFQURmLEdBQ29CQSxFQUFFLEVBRHRCLEdBQzJCQSxFQUFFLEVBRDdCLEdBQ2tDLEdBRGxDLEdBQ3dDUSxJQUFJLENBQUNDLEdBQUwsR0FBV0wsUUFBWCxDQUFvQixFQUFwQixDQUY1QztBQUlIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIjtcblxuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbi8qKlxuICogTG9hZCB0aGUgZWxlbWVudCBwb2ludGVkIGJ5IHRoZSBwb2ludGVyXG4gKiBAcGFyYW0gU3BpbmFsTm9kZVBvaW50ZXJcbiAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gKi9cbmZ1bmN0aW9uIHByb21pc2VMb2FkKFNwaW5hbE5vZGVQb2ludGVyKSB7XG4gICAgaWYgKFxuICAgICAgICBTcGluYWxOb2RlUG9pbnRlci5wdHIgaW5zdGFuY2VvZiBnbG9iYWxUeXBlLlB0ciAmJlxuICAgICAgICBTcGluYWxOb2RlUG9pbnRlci5wdHIuZGF0YS52YWx1ZSAhPT0gMCAmJlxuICAgICAgICB0eXBlb2YgRmlsZVN5c3RlbS5fb2JqZWN0c1tTcGluYWxOb2RlUG9pbnRlci5wdHIuZGF0YS52YWx1ZV0gIT09IFwidW5kZWZpbmVkXCJcbiAgICApXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRmlsZVN5c3RlbS5fb2JqZWN0c1tTcGluYWxOb2RlUG9pbnRlci5wdHIuZGF0YS52YWx1ZV0pO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgU3BpbmFsTm9kZVBvaW50ZXIucHRyLmxvYWQocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xufVxuXG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBzNCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAuc3Vic3RyaW5nKDEpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHVuaXF1ZSBpZCBiYXNlZCBvbiB0aGUgbmFtZVxuICogQHBhcmFtIG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGd1aWQobmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICAgIG5hbWUgKyBcIi1cIiArIHM0KCkgKyBzNCgpICsgXCItXCIgKyBzNCgpICsgXCItXCIgKyBzNCgpICsgXCItXCIgK1xuICAgICAgICBzNCgpICsgXCItXCIgKyBzNCgpICsgczQoKSArIHM0KCkgKyBcIi1cIiArIERhdGUubm93KCkudG9TdHJpbmcoMTYpXG4gICAgKTtcbn1cblxuZXhwb3J0IHtcbiAgICBwcm9taXNlTG9hZCxcbiAgICBndWlkXG59XG4iXX0=