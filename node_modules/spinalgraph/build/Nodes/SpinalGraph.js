"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SpinalNode = _interopRequireDefault(require("./SpinalNode"));

var _spinalCoreConnectorjs = _interopRequireDefault(require("spinal-core-connectorjs"));

var _SpinalRelationFactory = require("../Relations/SpinalRelationFactory");

var _Utilities = require("../Utilities");

var _SpinalContext = _interopRequireDefault(require("./SpinalContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const globalType = typeof window === "undefined" ? global : window;
const HAS_CONTEXT_RELATION_NAME = "hasContext";

class SpinalGraph extends _SpinalNode.default {
  /**
   *
   * @param type {string}  default "SpinalGraph"
   * @param element {Model}
   */
  constructor(type = "SpinalGraph", element = new globalType.Model()) {
    super(type, element);
    this.add_attr({
      BIMObjects: new globalType.Lst()
    });

    this._createRelation(HAS_CONTEXT_RELATION_NAME, _SpinalRelationFactory.SPINAL_RELATION_TYPE);

    this.info.id.set((0, _Utilities.guid)(this.constructor.name));
  }
  /**
   * Adds a function to the graph
   * @param {SpinalContext} context
   */


  addContext(context) {
    if (context instanceof _SpinalContext.default) this.addChild(context, HAS_CONTEXT_RELATION_NAME, _SpinalRelationFactory.SPINAL_RELATION_TYPE);else throw new Error("Cannot add an element which is not a context");
  }
  /**
   * Searches for a context using its name
   * @param name {string} Name of the context
   * @return {SpinalContext|undefined} The wanted context or undefined
   */


  getContext(name) {
    var _this = this;

    return _asyncToGenerator(function* () {
      let children = yield _this.getChildren([HAS_CONTEXT_RELATION_NAME]);
      return children.find(child => child.info.name.get() === name);
    })();
  }

}

_spinalCoreConnectorjs.default.register_models([SpinalGraph]);

var _default = SpinalGraph;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ob2Rlcy9TcGluYWxHcmFwaC5qcyJdLCJuYW1lcyI6WyJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiSEFTX0NPTlRFWFRfUkVMQVRJT05fTkFNRSIsIlNwaW5hbEdyYXBoIiwiU3BpbmFsTm9kZSIsImNvbnN0cnVjdG9yIiwidHlwZSIsImVsZW1lbnQiLCJNb2RlbCIsImFkZF9hdHRyIiwiQklNT2JqZWN0cyIsIkxzdCIsIl9jcmVhdGVSZWxhdGlvbiIsIlNQSU5BTF9SRUxBVElPTl9UWVBFIiwiaW5mbyIsImlkIiwic2V0IiwibmFtZSIsImFkZENvbnRleHQiLCJjb250ZXh0IiwiU3BpbmFsQ29udGV4dCIsImFkZENoaWxkIiwiRXJyb3IiLCJnZXRDb250ZXh0IiwiY2hpbGRyZW4iLCJnZXRDaGlsZHJlbiIsImZpbmQiLCJjaGlsZCIsImdldCIsInNwaW5hbENvcmUiLCJyZWdpc3Rlcl9tb2RlbHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0MsTUFBaEMsR0FBeUNELE1BQTVEO0FBQ0EsTUFBTUUseUJBQXlCLEdBQUcsWUFBbEM7O0FBR0EsTUFBTUMsV0FBTixTQUEwQkMsbUJBQTFCLENBQXFDO0FBQ2pDOzs7OztBQUtBQyxFQUFBQSxXQUFXLENBQUNDLElBQUksR0FBRyxhQUFSLEVBQXVCQyxPQUFPLEdBQUcsSUFBSVIsVUFBVSxDQUFDUyxLQUFmLEVBQWpDLEVBQXVEO0FBQzlELFVBQU1GLElBQU4sRUFBWUMsT0FBWjtBQUNBLFNBQUtFLFFBQUwsQ0FBYztBQUNWQyxNQUFBQSxVQUFVLEVBQUUsSUFBSVgsVUFBVSxDQUFDWSxHQUFmO0FBREYsS0FBZDs7QUFJQSxTQUFLQyxlQUFMLENBQXFCVix5QkFBckIsRUFBZ0RXLDJDQUFoRDs7QUFDQSxTQUFLQyxJQUFMLENBQVVDLEVBQVYsQ0FBYUMsR0FBYixDQUFpQixxQkFBSyxLQUFLWCxXQUFMLENBQWlCWSxJQUF0QixDQUFqQjtBQUNIO0FBRUQ7Ozs7OztBQUlBQyxFQUFBQSxVQUFVLENBQUNDLE9BQUQsRUFBVTtBQUNoQixRQUFJQSxPQUFPLFlBQVlDLHNCQUF2QixFQUNJLEtBQUtDLFFBQUwsQ0FBY0YsT0FBZCxFQUF1QmpCLHlCQUF2QixFQUFrRFcsMkNBQWxELEVBREosS0FHSSxNQUFNLElBQUlTLEtBQUosQ0FBVSw4Q0FBVixDQUFOO0FBQ1A7QUFFRDs7Ozs7OztBQUtNQyxFQUFBQSxVQUFOLENBQWlCTixJQUFqQixFQUF1QjtBQUFBOztBQUFBO0FBQ25CLFVBQUlPLFFBQVEsU0FBUyxLQUFJLENBQUNDLFdBQUwsQ0FBaUIsQ0FBQ3ZCLHlCQUFELENBQWpCLENBQXJCO0FBRUEsYUFBT3NCLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjQyxLQUFLLElBQUlBLEtBQUssQ0FBQ2IsSUFBTixDQUFXRyxJQUFYLENBQWdCVyxHQUFoQixPQUEwQlgsSUFBakQsQ0FBUDtBQUhtQjtBQUl0Qjs7QUFwQ2dDOztBQXVDckNZLCtCQUFXQyxlQUFYLENBQTJCLENBQUMzQixXQUFELENBQTNCOztlQUNlQSxXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNwaW5hbE5vZGUgZnJvbSBcIi4vU3BpbmFsTm9kZVwiXG5pbXBvcnQgc3BpbmFsQ29yZSBmcm9tIFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIjtcbmltcG9ydCB7IFNQSU5BTF9SRUxBVElPTl9UWVBFIH0gZnJvbSBcIi4uL1JlbGF0aW9ucy9TcGluYWxSZWxhdGlvbkZhY3RvcnlcIlxuaW1wb3J0IHsgZ3VpZCB9IGZyb20gXCIuLi9VdGlsaXRpZXNcIjtcbmltcG9ydCBTcGluYWxDb250ZXh0IGZyb20gXCIuL1NwaW5hbENvbnRleHRcIjtcblxuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5jb25zdCBIQVNfQ09OVEVYVF9SRUxBVElPTl9OQU1FID0gXCJoYXNDb250ZXh0XCI7XG5cblxuY2xhc3MgU3BpbmFsR3JhcGggZXh0ZW5kcyBTcGluYWxOb2RlIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9ICBkZWZhdWx0IFwiU3BpbmFsR3JhcGhcIlxuICAgICAqIEBwYXJhbSBlbGVtZW50IHtNb2RlbH1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eXBlID0gXCJTcGluYWxHcmFwaFwiLCBlbGVtZW50ID0gbmV3IGdsb2JhbFR5cGUuTW9kZWwpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgZWxlbWVudCk7XG4gICAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICAgICAgQklNT2JqZWN0czogbmV3IGdsb2JhbFR5cGUuTHN0KClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY3JlYXRlUmVsYXRpb24oSEFTX0NPTlRFWFRfUkVMQVRJT05fTkFNRSwgU1BJTkFMX1JFTEFUSU9OX1RZUEUpO1xuICAgICAgICB0aGlzLmluZm8uaWQuc2V0KGd1aWQodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGZ1bmN0aW9uIHRvIHRoZSBncmFwaFxuICAgICAqIEBwYXJhbSB7U3BpbmFsQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIGFkZENvbnRleHQoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dCBpbnN0YW5jZW9mIFNwaW5hbENvbnRleHQpXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRleHQsIEhBU19DT05URVhUX1JFTEFUSU9OX05BTUUsIFNQSU5BTF9SRUxBVElPTl9UWVBFKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFkZCBhbiBlbGVtZW50IHdoaWNoIGlzIG5vdCBhIGNvbnRleHRcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGEgY29udGV4dCB1c2luZyBpdHMgbmFtZVxuICAgICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IE5hbWUgb2YgdGhlIGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHtTcGluYWxDb250ZXh0fHVuZGVmaW5lZH0gVGhlIHdhbnRlZCBjb250ZXh0IG9yIHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGFzeW5jIGdldENvbnRleHQobmFtZSkge1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSBhd2FpdCB0aGlzLmdldENoaWxkcmVuKFtIQVNfQ09OVEVYVF9SRUxBVElPTl9OQU1FXSk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuLmZpbmQoY2hpbGQgPT4gY2hpbGQuaW5mby5uYW1lLmdldCgpID09PSBuYW1lKTtcbiAgICB9XG59XG5cbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtTcGluYWxHcmFwaF0pO1xuZXhwb3J0IGRlZmF1bHQgU3BpbmFsR3JhcGg7XG4iXX0=