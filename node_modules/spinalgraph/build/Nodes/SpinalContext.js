"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _SpinalNode = _interopRequireDefault(require("./SpinalNode"));

var _spinalCoreConnectorjs = _interopRequireDefault(require("spinal-core-connectorjs"));

var _SpinalRelationFactory = require("../Relations/SpinalRelationFactory");

var _Utilities = require("../Utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const globalType = typeof window === "undefined" ? global : window;

class SpinalContext extends _SpinalNode.default {
  /**
   *
   * @param type of the context
   * @param name of the context
   * @param element of the node
   */
  constructor(type = "SpinalContext", name = "undefined", element = new globalType.Model()) {
    super(type, element);
    this.add_attr({
      relationIds: new globalType.Lst(),
      relationsNames: new globalType.Lst()
    });
    this.info.id.set((0, _Utilities.guid)(this.constructor.name));
    this.info.add_attr({
      name: typeof name === "undefined" ? this.info.id.get() : name
    });
  }
  /**
   * Create a relation between a node and another node/model. this function can be used to linked two context
   * @param parent {SpinalNode} parent of the relation
   * @param child {SpinalNode | Model} child of the relation
   * @param relationName {string} name of the relation
   * @return {Str}
   */


  createRelation(parent, child, relationName) {
    if (child instanceof _SpinalNode.default || child instanceof globalType.Model) {
      const relation = _SpinalRelationFactory.SpinalRelationFactory.getNewRelation(relationName, _SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE);

      relation.setParent(parent);
      relation.addChild(child);
      this.addRelationId(relation.id);
      return relation.id;
    } //Todo create Some Custom Error


    throw new Error("Cannot add a child witch is not an instance of SpinalNode or Model.");
  }
  /**
   * Add the relation id to the relation ids displayable by this context
   * @param relationId {string}
   */


  addRelationId(relationId) {
    this.relationIds.push(relationId);
  }
  /**
   * Remove all the nodes associated to this context from the graph
   */


  removeFromGraph() {} //Todo use DFS to remove all the context from the graph

  /**
   * Add Child to the context with a spinalRelationLstPtrType
   * @param child {SpinalNode| Model} to be added as child
   * @param relationName {string} name of the relation
   * @param relationType {int} this parameter is here only to properly override the parent method.
   */


  addChild(child, relationName, relationType = _SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE) {
    super.addChild(child, relationName, _SpinalRelationFactory.SPINAL_RELATION_PTR_LST_TYPE);
  }

}

_spinalCoreConnectorjs.default.register_models([SpinalContext]);

var _default = SpinalContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Ob2Rlcy9TcGluYWxDb250ZXh0LmpzIl0sIm5hbWVzIjpbImdsb2JhbFR5cGUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJTcGluYWxDb250ZXh0IiwiU3BpbmFsTm9kZSIsImNvbnN0cnVjdG9yIiwidHlwZSIsIm5hbWUiLCJlbGVtZW50IiwiTW9kZWwiLCJhZGRfYXR0ciIsInJlbGF0aW9uSWRzIiwiTHN0IiwicmVsYXRpb25zTmFtZXMiLCJpbmZvIiwiaWQiLCJzZXQiLCJnZXQiLCJjcmVhdGVSZWxhdGlvbiIsInBhcmVudCIsImNoaWxkIiwicmVsYXRpb25OYW1lIiwicmVsYXRpb24iLCJTcGluYWxSZWxhdGlvbkZhY3RvcnkiLCJnZXROZXdSZWxhdGlvbiIsIlNQSU5BTF9SRUxBVElPTl9QVFJfTFNUX1RZUEUiLCJzZXRQYXJlbnQiLCJhZGRDaGlsZCIsImFkZFJlbGF0aW9uSWQiLCJFcnJvciIsInJlbGF0aW9uSWQiLCJwdXNoIiwicmVtb3ZlRnJvbUdyYXBoIiwicmVsYXRpb25UeXBlIiwic3BpbmFsQ29yZSIsInJlZ2lzdGVyX21vZGVscyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUlBOzs7O0FBR0EsTUFBTUEsVUFBVSxHQUFHLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDs7QUFFQSxNQUFNRSxhQUFOLFNBQTRCQyxtQkFBNUIsQ0FBdUM7QUFDbkM7Ozs7OztBQU1BQyxFQUFBQSxXQUFXLENBQUNDLElBQUksR0FBRyxlQUFSLEVBQXlCQyxJQUFJLEdBQUcsV0FBaEMsRUFBNkNDLE9BQU8sR0FBRyxJQUFJUixVQUFVLENBQUNTLEtBQWYsRUFBdkQsRUFBNkU7QUFDcEYsVUFBTUgsSUFBTixFQUFZRSxPQUFaO0FBQ0EsU0FBS0UsUUFBTCxDQUFjO0FBQ1ZDLE1BQUFBLFdBQVcsRUFBRSxJQUFJWCxVQUFVLENBQUNZLEdBQWYsRUFESDtBQUVWQyxNQUFBQSxjQUFjLEVBQUUsSUFBSWIsVUFBVSxDQUFDWSxHQUFmO0FBRk4sS0FBZDtBQUlBLFNBQUtFLElBQUwsQ0FBVUMsRUFBVixDQUFhQyxHQUFiLENBQWlCLHFCQUFLLEtBQUtYLFdBQUwsQ0FBaUJFLElBQXRCLENBQWpCO0FBQ0EsU0FBS08sSUFBTCxDQUFVSixRQUFWLENBQW1CO0FBQUVILE1BQUFBLElBQUksRUFBRSxPQUFPQSxJQUFQLEtBQWdCLFdBQWhCLEdBQThCLEtBQUtPLElBQUwsQ0FBVUMsRUFBVixDQUFhRSxHQUFiLEVBQTlCLEdBQW1EVjtBQUEzRCxLQUFuQjtBQUNIO0FBRUQ7Ozs7Ozs7OztBQU9BVyxFQUFBQSxjQUFjLENBQUNDLE1BQUQsRUFBU0MsS0FBVCxFQUFnQkMsWUFBaEIsRUFBOEI7QUFDeEMsUUFBS0QsS0FBSyxZQUFZaEIsbUJBQWxCLElBQWtDZ0IsS0FBSyxZQUFZcEIsVUFBVSxDQUFDUyxLQUFsRSxFQUEwRTtBQUN0RSxZQUFNYSxRQUFRLEdBQUdDLDZDQUFzQkMsY0FBdEIsQ0FBcUNILFlBQXJDLEVBQW1ESSxtREFBbkQsQ0FBakI7O0FBQ0FILE1BQUFBLFFBQVEsQ0FBQ0ksU0FBVCxDQUFtQlAsTUFBbkI7QUFDQUcsTUFBQUEsUUFBUSxDQUFDSyxRQUFULENBQWtCUCxLQUFsQjtBQUNBLFdBQUtRLGFBQUwsQ0FBbUJOLFFBQVEsQ0FBQ1AsRUFBNUI7QUFDQSxhQUFPTyxRQUFRLENBQUNQLEVBQWhCO0FBQ0gsS0FQdUMsQ0FReEM7OztBQUNBLFVBQU0sSUFBSWMsS0FBSixDQUFVLHFFQUFWLENBQU47QUFDSDtBQUVEOzs7Ozs7QUFJQUQsRUFBQUEsYUFBYSxDQUFDRSxVQUFELEVBQWE7QUFDdEIsU0FBS25CLFdBQUwsQ0FBaUJvQixJQUFqQixDQUFzQkQsVUFBdEI7QUFDSDtBQUVEOzs7OztBQUdBRSxFQUFBQSxlQUFlLEdBQUcsQ0FFakIsQ0FGYyxDQUNYOztBQUdKOzs7Ozs7OztBQU1BTCxFQUFBQSxRQUFRLENBQUNQLEtBQUQsRUFBUUMsWUFBUixFQUFzQlksWUFBWSxHQUFHUixtREFBckMsRUFBb0U7QUFDeEUsVUFBTUUsUUFBTixDQUFlUCxLQUFmLEVBQXNCQyxZQUF0QixFQUFvQ0ksbURBQXBDO0FBQ0g7O0FBM0RrQzs7QUE4RHZDUywrQkFBV0MsZUFBWCxDQUEyQixDQUFDaEMsYUFBRCxDQUEzQjs7ZUFDZUEsYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTcGluYWxOb2RlIGZyb20gXCIuL1NwaW5hbE5vZGVcIlxuaW1wb3J0IHNwaW5hbENvcmUgZnJvbSBcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCI7XG5pbXBvcnQge1xuICAgIFNQSU5BTF9SRUxBVElPTl9QVFJfTFNUX1RZUEUsXG4gICAgU3BpbmFsUmVsYXRpb25GYWN0b3J5XG59IGZyb20gXCIuLi9SZWxhdGlvbnMvU3BpbmFsUmVsYXRpb25GYWN0b3J5XCJcbmltcG9ydCB7IGd1aWQgfSBmcm9tIFwiLi4vVXRpbGl0aWVzXCI7XG5cblxuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbmNsYXNzIFNwaW5hbENvbnRleHQgZXh0ZW5kcyBTcGluYWxOb2RlIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIG9mIHRoZSBjb250ZXh0XG4gICAgICogQHBhcmFtIG5hbWUgb2YgdGhlIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBvZiB0aGUgbm9kZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR5cGUgPSBcIlNwaW5hbENvbnRleHRcIiwgbmFtZSA9IFwidW5kZWZpbmVkXCIsIGVsZW1lbnQgPSBuZXcgZ2xvYmFsVHlwZS5Nb2RlbCkge1xuICAgICAgICBzdXBlcih0eXBlLCBlbGVtZW50KTtcbiAgICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgICAgICByZWxhdGlvbklkczogbmV3IGdsb2JhbFR5cGUuTHN0KCksXG4gICAgICAgICAgICByZWxhdGlvbnNOYW1lczogbmV3IGdsb2JhbFR5cGUuTHN0KClcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5mby5pZC5zZXQoZ3VpZCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUpKTtcbiAgICAgICAgdGhpcy5pbmZvLmFkZF9hdHRyKHsgbmFtZTogdHlwZW9mIG5hbWUgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzLmluZm8uaWQuZ2V0KCkgOiBuYW1lIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHJlbGF0aW9uIGJldHdlZW4gYSBub2RlIGFuZCBhbm90aGVyIG5vZGUvbW9kZWwuIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gbGlua2VkIHR3byBjb250ZXh0XG4gICAgICogQHBhcmFtIHBhcmVudCB7U3BpbmFsTm9kZX0gcGFyZW50IG9mIHRoZSByZWxhdGlvblxuICAgICAqIEBwYXJhbSBjaGlsZCB7U3BpbmFsTm9kZSB8IE1vZGVsfSBjaGlsZCBvZiB0aGUgcmVsYXRpb25cbiAgICAgKiBAcGFyYW0gcmVsYXRpb25OYW1lIHtzdHJpbmd9IG5hbWUgb2YgdGhlIHJlbGF0aW9uXG4gICAgICogQHJldHVybiB7U3RyfVxuICAgICAqL1xuICAgIGNyZWF0ZVJlbGF0aW9uKHBhcmVudCwgY2hpbGQsIHJlbGF0aW9uTmFtZSkge1xuICAgICAgICBpZiAoKGNoaWxkIGluc3RhbmNlb2YgU3BpbmFsTm9kZSkgfHwgKGNoaWxkIGluc3RhbmNlb2YgZ2xvYmFsVHlwZS5Nb2RlbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uID0gU3BpbmFsUmVsYXRpb25GYWN0b3J5LmdldE5ld1JlbGF0aW9uKHJlbGF0aW9uTmFtZSwgU1BJTkFMX1JFTEFUSU9OX1BUUl9MU1RfVFlQRSk7XG4gICAgICAgICAgICByZWxhdGlvbi5zZXRQYXJlbnQocGFyZW50KTtcbiAgICAgICAgICAgIHJlbGF0aW9uLmFkZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuYWRkUmVsYXRpb25JZChyZWxhdGlvbi5pZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVsYXRpb24uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy9Ub2RvIGNyZWF0ZSBTb21lIEN1c3RvbSBFcnJvclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGEgY2hpbGQgd2l0Y2ggaXMgbm90IGFuIGluc3RhbmNlIG9mIFNwaW5hbE5vZGUgb3IgTW9kZWwuXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgcmVsYXRpb24gaWQgdG8gdGhlIHJlbGF0aW9uIGlkcyBkaXNwbGF5YWJsZSBieSB0aGlzIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gcmVsYXRpb25JZCB7c3RyaW5nfVxuICAgICAqL1xuICAgIGFkZFJlbGF0aW9uSWQocmVsYXRpb25JZCkge1xuICAgICAgICB0aGlzLnJlbGF0aW9uSWRzLnB1c2gocmVsYXRpb25JZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCB0aGUgbm9kZXMgYXNzb2NpYXRlZCB0byB0aGlzIGNvbnRleHQgZnJvbSB0aGUgZ3JhcGhcbiAgICAgKi9cbiAgICByZW1vdmVGcm9tR3JhcGgoKSB7XG4gICAgICAgIC8vVG9kbyB1c2UgREZTIHRvIHJlbW92ZSBhbGwgdGhlIGNvbnRleHQgZnJvbSB0aGUgZ3JhcGhcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgQ2hpbGQgdG8gdGhlIGNvbnRleHQgd2l0aCBhIHNwaW5hbFJlbGF0aW9uTHN0UHRyVHlwZVxuICAgICAqIEBwYXJhbSBjaGlsZCB7U3BpbmFsTm9kZXwgTW9kZWx9IHRvIGJlIGFkZGVkIGFzIGNoaWxkXG4gICAgICogQHBhcmFtIHJlbGF0aW9uTmFtZSB7c3RyaW5nfSBuYW1lIG9mIHRoZSByZWxhdGlvblxuICAgICAqIEBwYXJhbSByZWxhdGlvblR5cGUge2ludH0gdGhpcyBwYXJhbWV0ZXIgaXMgaGVyZSBvbmx5IHRvIHByb3Blcmx5IG92ZXJyaWRlIHRoZSBwYXJlbnQgbWV0aG9kLlxuICAgICAqL1xuICAgIGFkZENoaWxkKGNoaWxkLCByZWxhdGlvbk5hbWUsIHJlbGF0aW9uVHlwZSA9IFNQSU5BTF9SRUxBVElPTl9QVFJfTFNUX1RZUEUgKSB7XG4gICAgICAgIHN1cGVyLmFkZENoaWxkKGNoaWxkLCByZWxhdGlvbk5hbWUsIFNQSU5BTF9SRUxBVElPTl9QVFJfTFNUX1RZUEUpO1xuICAgIH1cbn1cblxuc3BpbmFsQ29yZS5yZWdpc3Rlcl9tb2RlbHMoW1NwaW5hbENvbnRleHRdKTtcbmV4cG9ydCBkZWZhdWx0IFNwaW5hbENvbnRleHQ7XG4iXX0=