"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseSpinalRelation = _interopRequireDefault(require("./BaseSpinalRelation"));

var _SpinalRelationFactory = require("./SpinalRelationFactory");

var _SpinalNode = _interopRequireDefault(require("../Nodes/SpinalNode"));

var _spinalCoreConnectorjs = _interopRequireDefault(require("spinal-core-connectorjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const globalType = typeof window === "undefined" ? global : window;

class SpinalRelationRef extends _BaseSpinalRelation.default {
  constructor(name) {
    super(name);
    this.add_attr({
      children: new globalType.Lst()
    });
  }
  /**
   * This function retrieves all the id from children of the relation and return them inside an array.
   * @return {Array} containing all the children Id of the relation
   */


  getChildrenIds() {
    const res = [];

    for (let i = 0; i < this.children.length; i++) {
      res.push(this.children[i].getId());
    }

    return res;
  }
  /**
   * Return all the children of the relation
   * @return {Promise<globalType.Lst>}
   */


  getChildren() {
    // noinspection JSValidateTypes
    return Promise.resolve(this.children);
  }
  /**
   * Returns the type of the relation
   * @return {Number} Type of the relation
   */


  getType() {
    return _SpinalRelationFactory.SPINAL_RELATION_TYPE;
  }
  /**
   * Add node as child of the relation if node is a model create a node
   * @param node {SpinalNode | globalType.Model}
   */


  addChild(node) {
    if (node instanceof _SpinalNode.default) {
      this.children.push(node);
      this.getParent().then(parent => {
        // noinspection JSAccessibilityCheck
        node._addParent(parent);
      });
    } else if (node instanceof globalType.Model) {
      const tmpNode = new _SpinalNode.default(this.name, node);
      this.addChild(tmpNode);
    }
  }
  /**
   * Remove the child from the relation
   * @param node {SpinalNode} child of the relation
   * @return {Promise<boolean>}
   */


  removeChild(node) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.children.remove(node);

      return _this.children.indexOf(node) === -1;
    })();
  }

}

_spinalCoreConnectorjs.default.register_models([SpinalRelationRef]);

var _default = SpinalRelationRef;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZWxhdGlvbnMvU3BpbmFsUmVsYXRpb25SZWYuanMiXSwibmFtZXMiOlsiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsIlNwaW5hbFJlbGF0aW9uUmVmIiwiQmFzZVNwaW5hbFJlbGF0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiYWRkX2F0dHIiLCJjaGlsZHJlbiIsIkxzdCIsImdldENoaWxkcmVuSWRzIiwicmVzIiwiaSIsImxlbmd0aCIsInB1c2giLCJnZXRJZCIsImdldENoaWxkcmVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRUeXBlIiwiU1BJTkFMX1JFTEFUSU9OX1RZUEUiLCJhZGRDaGlsZCIsIm5vZGUiLCJTcGluYWxOb2RlIiwiZ2V0UGFyZW50IiwidGhlbiIsInBhcmVudCIsIl9hZGRQYXJlbnQiLCJNb2RlbCIsInRtcE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZSIsImluZGV4T2YiLCJzcGluYWxDb3JlIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsVUFBVSxHQUFHLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDs7QUFFQSxNQUFNRSxpQkFBTixTQUFnQ0MsMkJBQWhDLENBQW1EO0FBQy9DQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBTztBQUNkLFVBQU1BLElBQU47QUFDQSxTQUFLQyxRQUFMLENBQWM7QUFDVkMsTUFBQUEsUUFBUSxFQUFFLElBQUlSLFVBQVUsQ0FBQ1MsR0FBZjtBQURBLEtBQWQ7QUFHSDtBQUVEOzs7Ozs7QUFJQUMsRUFBQUEsY0FBYyxHQUFHO0FBQ2IsVUFBTUMsR0FBRyxHQUFHLEVBQVo7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtKLFFBQUwsQ0FBY0ssTUFBbEMsRUFBMENELENBQUMsRUFBM0MsRUFBK0M7QUFDM0NELE1BQUFBLEdBQUcsQ0FBQ0csSUFBSixDQUFTLEtBQUtOLFFBQUwsQ0FBY0ksQ0FBZCxFQUFpQkcsS0FBakIsRUFBVDtBQUNIOztBQUNELFdBQU9KLEdBQVA7QUFDSDtBQUVEOzs7Ozs7QUFJQUssRUFBQUEsV0FBVyxHQUFHO0FBQ1Y7QUFDQSxXQUFPQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsS0FBS1YsUUFBckIsQ0FBUDtBQUNIO0FBRUQ7Ozs7OztBQUlBVyxFQUFBQSxPQUFPLEdBQUc7QUFDTixXQUFPQywyQ0FBUDtBQUNIO0FBRUQ7Ozs7OztBQUlBQyxFQUFBQSxRQUFRLENBQUNDLElBQUQsRUFBTztBQUVYLFFBQUlBLElBQUksWUFBWUMsbUJBQXBCLEVBQWdDO0FBQzVCLFdBQUtmLFFBQUwsQ0FBY00sSUFBZCxDQUFtQlEsSUFBbkI7QUFDQSxXQUFLRSxTQUFMLEdBQWlCQyxJQUFqQixDQUFzQkMsTUFBTSxJQUFJO0FBQUM7QUFDN0JKLFFBQUFBLElBQUksQ0FBQ0ssVUFBTCxDQUFnQkQsTUFBaEI7QUFDSCxPQUZEO0FBR0gsS0FMRCxNQU1LLElBQUlKLElBQUksWUFBWXRCLFVBQVUsQ0FBQzRCLEtBQS9CLEVBQXNDO0FBQ3ZDLFlBQU1DLE9BQU8sR0FBRyxJQUFJTixtQkFBSixDQUFlLEtBQUtqQixJQUFwQixFQUEwQmdCLElBQTFCLENBQWhCO0FBQ0EsV0FBS0QsUUFBTCxDQUFjUSxPQUFkO0FBQ0g7QUFDSjtBQUVEOzs7Ozs7O0FBS01DLEVBQUFBLFdBQU4sQ0FBa0JSLElBQWxCLEVBQXdCO0FBQUE7O0FBQUE7QUFDcEIsTUFBQSxLQUFJLENBQUNkLFFBQUwsQ0FBY3VCLE1BQWQsQ0FBcUJULElBQXJCOztBQUNBLGFBQU8sS0FBSSxDQUFDZCxRQUFMLENBQWN3QixPQUFkLENBQXNCVixJQUF0QixNQUFnQyxDQUFDLENBQXhDO0FBRm9CO0FBR3ZCOztBQS9EOEM7O0FBa0VuRFcsK0JBQVdDLGVBQVgsQ0FBMkIsQ0FBQy9CLGlCQUFELENBQTNCOztlQUNlQSxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlU3BpbmFsUmVsYXRpb24gZnJvbSBcIi4vQmFzZVNwaW5hbFJlbGF0aW9uXCJcbmltcG9ydCB7IFNQSU5BTF9SRUxBVElPTl9UWVBFIH0gZnJvbSBcIi4vU3BpbmFsUmVsYXRpb25GYWN0b3J5XCJcbmltcG9ydCBTcGluYWxOb2RlIGZyb20gXCIuLi9Ob2Rlcy9TcGluYWxOb2RlXCJcbmltcG9ydCBzcGluYWxDb3JlIGZyb20gXCJzcGluYWwtY29yZS1jb25uZWN0b3Jqc1wiO1xuXG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcblxuY2xhc3MgU3BpbmFsUmVsYXRpb25SZWYgZXh0ZW5kcyBCYXNlU3BpbmFsUmVsYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgc3VwZXIobmFtZSk7XG4gICAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICAgICAgY2hpbGRyZW46IG5ldyBnbG9iYWxUeXBlLkxzdCgpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0cmlldmVzIGFsbCB0aGUgaWQgZnJvbSBjaGlsZHJlbiBvZiB0aGUgcmVsYXRpb24gYW5kIHJldHVybiB0aGVtIGluc2lkZSBhbiBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gY29udGFpbmluZyBhbGwgdGhlIGNoaWxkcmVuIElkIG9mIHRoZSByZWxhdGlvblxuICAgICAqL1xuICAgIGdldENoaWxkcmVuSWRzKCkge1xuICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXMucHVzaCh0aGlzLmNoaWxkcmVuW2ldLmdldElkKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFsbCB0aGUgY2hpbGRyZW4gb2YgdGhlIHJlbGF0aW9uXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxnbG9iYWxUeXBlLkxzdD59XG4gICAgICovXG4gICAgZ2V0Q2hpbGRyZW4oKSB7XG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1ZhbGlkYXRlVHlwZXNcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0eXBlIG9mIHRoZSByZWxhdGlvblxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVHlwZSBvZiB0aGUgcmVsYXRpb25cbiAgICAgKi9cbiAgICBnZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gU1BJTkFMX1JFTEFUSU9OX1RZUEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIG5vZGUgYXMgY2hpbGQgb2YgdGhlIHJlbGF0aW9uIGlmIG5vZGUgaXMgYSBtb2RlbCBjcmVhdGUgYSBub2RlXG4gICAgICogQHBhcmFtIG5vZGUge1NwaW5hbE5vZGUgfCBnbG9iYWxUeXBlLk1vZGVsfVxuICAgICAqL1xuICAgIGFkZENoaWxkKG5vZGUpIHtcblxuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFNwaW5hbE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0UGFyZW50KCkudGhlbihwYXJlbnQgPT4gey8vIG5vaW5zcGVjdGlvbiBKU0FjY2Vzc2liaWxpdHlDaGVja1xuICAgICAgICAgICAgICAgIG5vZGUuX2FkZFBhcmVudChwYXJlbnQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgZ2xvYmFsVHlwZS5Nb2RlbCkge1xuICAgICAgICAgICAgY29uc3QgdG1wTm9kZSA9IG5ldyBTcGluYWxOb2RlKHRoaXMubmFtZSwgbm9kZSk7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHRtcE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBjaGlsZCBmcm9tIHRoZSByZWxhdGlvblxuICAgICAqIEBwYXJhbSBub2RlIHtTcGluYWxOb2RlfSBjaGlsZCBvZiB0aGUgcmVsYXRpb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZUNoaWxkKG5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmUobm9kZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmluZGV4T2Yobm9kZSkgPT09IC0xO1xuICAgIH1cbn1cblxuc3BpbmFsQ29yZS5yZWdpc3Rlcl9tb2RlbHMoW1NwaW5hbFJlbGF0aW9uUmVmXSk7XG5leHBvcnQgZGVmYXVsdCBTcGluYWxSZWxhdGlvblJlZjtcbiJdfQ==